name: AWS Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/aws-deployment.yml'

env:
  AWS_REGION: us-west-2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  test-server:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: server/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install --no-interaction
          
      - name: Run tests
        run: |
          cd server
          poetry run pytest

  deploy-server:
    needs: test-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names h-genai-server || \
          aws ecr create-repository --repository-name h-genai-server

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: "140023381458"
        run: |
          cd server
          docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/h-genai-server:${IMAGE_TAG} -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/h-genai-server:latest .
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/h-genai-server:${IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/h-genai-server:latest
          
      - name: Update Lambda function
        env:
          AWS_ACCOUNT_ID: "140023381458"
        run: |
          aws lambda update-function-code \
            --function-name h-genai-server \
            --image-uri ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/h-genai-server:latest \
            --publish

      - name: Wait for Lambda Update
        run: |
          aws lambda wait function-updated --function-name h-genai-server

      - name: Update Lambda Environment Variables
        run: |
          aws lambda update-function-configuration \
            --function-name h-genai-server \
            --environment "Variables={
              BR_AWS_ACCESS_KEY_ID=${{ secrets.BR_AWS_ACCESS_KEY_ID }},
              BR_AWS_SECRET_ACCESS_KEY=${{ secrets.BR_AWS_SECRET_ACCESS_KEY }},
              BR_AWS_DEFAULT_REGION=${{ env.AWS_REGION }},
              SERPERDEV_API_KEY=${{ secrets.SERPERDEV_API_KEY }},
              PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
            }"
          
      - name: Wait for Environment Variables Update
        run: |
          aws lambda wait function-updated --function-name h-genai-server

      - name: Update Lambda Timeout and Memory
        run: |
          aws lambda update-function-configuration \
            --function-name h-genai-server \
            --timeout 900 \
            --memory-size 2048

      - name: Wait for Final Configuration Update
        run: |
          aws lambda wait function-updated --function-name h-genai-server

      - name: Publish New Version
        id: publish
        run: |
          VERSION=$(aws lambda publish-version \
            --function-name h-genai-server \
            --description "Automated publish from GitHub Actions" \
            --query 'Version' \
            --output text)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create or Update Alias
        run: |
          aws lambda create-alias \
            --function-name h-genai-server \
            --name production \
            --function-version ${{ steps.publish.outputs.version }} \
            || aws lambda update-alias \
               --function-name h-genai-server \
               --name production \
               --function-version ${{ steps.publish.outputs.version }}

      - name: Configure Provisioned Concurrency
        run: |
          aws lambda put-provisioned-concurrency-config \
            --function-name h-genai-server \
            --qualifier production \
            --provisioned-concurrent-executions 1

      - name: Wait for Provisioned Concurrency Update
        run: |
          aws lambda wait function-updated --function-name h-genai-server

  deploy-webapp:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/web-app'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-app/package-lock.json
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install dependencies
        run: |
          cd web-app
          npm ci
          
      - name: Run tests
        run: |
          cd web-app
          npm run test
          
      - name: Build
        run: |
          cd web-app
          npm run build
          
      - name: Deploy to AWS Amplify
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID }} \
            --branch-name web-app \
            --job-type RELEASE
