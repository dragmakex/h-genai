name: AWS Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/aws-deployment.yml'

env:
  AWS_REGION: us-west-2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  test-and-lint-server:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          
      - name: Install dependencies
        run: |
          cd server
          poetry install
          
      - name: Run tests
        run: |
          cd server
          poetry run pytest
          
      - name: Run linting
        run: |
          cd server
          poetry run black . --check
          poetry run isort . --check
          poetry run mypy .

  deploy-server:
    needs: test-and-lint-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd server
          docker build -t $ECR_REGISTRY/h-genai-server:$IMAGE_TAG -t $ECR_REGISTRY/h-genai-server:latest .
          docker push $ECR_REGISTRY/h-genai-server:$IMAGE_TAG
          docker push $ECR_REGISTRY/h-genai-server:latest
          
      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name h-genai-server \
            --image-uri ${{ secrets.AWS_ECR_REGISTRY }}/h-genai-server:latest \
            --publish

      - name: Wait for Lambda Update
        run: |
          aws lambda wait function-updated --function-name h-genai-server

  deploy-webapp:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/web-app'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-app/package-lock.json
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Install dependencies
        run: |
          cd web-app
          npm ci
          
      - name: Run tests
        run: |
          cd web-app
          npm run test
          
      - name: Build
        run: |
          cd web-app
          npm run build
          
      - name: Deploy to AWS Amplify
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID }} \
            --branch-name web-app \
            --job-type RELEASE
